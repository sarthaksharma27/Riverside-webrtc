<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Meeting UI</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }
        
        body {
            background-color: #1a1a1a;
            color: white;
            height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .header {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            background-color: #1a1a1a;
            border-bottom: 1px solid #333;
        }
        
        .back-button {
            background: none;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            margin-right: 10px;
        }
        
        .logo {
            display: flex;
            align-items: center;
            margin-right: 15px;
        }
        
        .divider {
            color: #555;
            margin: 0 10px;
        }
        
        .room-name {
            font-weight: 500;
            margin-right: auto;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .recording-title {
            color: #bbb;
            font-weight: normal;
        }
        
        .header-buttons {
            display: flex;
            gap: 10px;
        }
        
        .header-button {
            background-color: #333;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .stream-button {
            background-color: #333;
            border: none;
            border-radius: 20px;
            padding: 8px 15px;
            color: white;
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            margin-right: 10px;
        }
        
        .main-content {
            flex: 1;
            display: flex;
            padding: 20px;
            gap: 20px;
            overflow: hidden;
            justify-content: center;
            align-items: center;
        }
        
        .video-container {
            width: 45%;
            height: 85%;
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            background-color: #333;
        }
        
        .video-border-purple {
            border: 3px solid #8a70f0;
        }
        
        .video-feed {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .participant-name {
            position: absolute;
            bottom: 20px;
            left: 20px;
            padding: 5px 10px;
            border-radius: 4px;
            background-color: rgba(0, 0, 0, 0.5);
            font-size: 14px;
        }
        
        .audio-indicator {
            position: absolute;
            bottom: 20px;
            right: 20px;
            width: 30px;
            height: 30px;
        }
        
        .controls {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: center;
            padding: 20px;
            background: linear-gradient(to top, rgba(26,26,26,1) 0%, rgba(26,26,26,0.8) 70%, rgba(26,26,26,0) 100%);
        }
        
        .control-buttons {
            display: flex;
            gap: 15px;
        }
        
        .control-button {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
        }
        
        .control-button-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: #333;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 5px;
        }
        
        .control-button-text {
            font-size: 12px;
            color: #aaa;
        }
        
        .record-button {
            background-color: #ff5959;
        }
        
        .leave-button {
            background-color: #ff5959;
        }

        .settings-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(0, 0, 0, 0.5);
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .user-status {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            padding: 10px 15px;
            border-radius: 8px;
            display: none;
        }

        @media (max-width: 768px) {
            .main-content {
                flex-direction: column;
                padding: 10px;
            }
            
            .video-container {
                width: 100%;
                height: calc(40vh - 120px);
                margin-bottom: 10px;
            }
            
            .controls {
                padding: 10px;
            }
            
            .control-button-icon {
                width: 40px;
                height: 40px;
            }
            
            .control-button-text {
                font-size: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <button class="back-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M15 18l-6-6 6-6"/>
            </svg>
        </button>
        <div class="logo">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
                <line x1="8" y1="21" x2="16" y2="21"/>
                <line x1="12" y1="17" x2="12" y2="21"/>
            </svg>
        </div>
        <div class="room-name">Sarthak Sharma's Studio <span class="recording-title">Untitled Recording</span></div>
        
        <button class="stream-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M12 2L2 7l10 5 10-5-10-5z"/>
                <path d="M2 17l10 5 10-5"/>
                <path d="M2 12l10 5 10-5"/>
            </svg>
            Live stream
        </button>
        
        <div class="header-buttons">
            <button class="header-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="2" y="2" width="20" height="20" rx="2" ry="2"/>
                    <circle cx="12" cy="12" r="4"/>
                    <line x1="16" y1="8" x2="16" y2="8"/>
                </svg>
            </button>
            <button class="header-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="3"/>
                    <path d="M19 9h1.5a2 2 0 0 1 0 4H19"/>
                    <path d="M16 15.5V17a2 2 0 0 0 4 0v-1.5"/>
                    <path d="M5 15.5V17a2 2 0 0 1-4 0v-1.5"/>
                    <path d="M5 9h-1.5a2 2 0 0 0 0 4H5"/>
                </svg>
            </button>
            <button class="header-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"/>
                    <line x1="12" y1="8" x2="12" y2="16"/>
                    <line x1="8" y1="12" x2="16" y2="12"/>
                </svg>
            </button>
        </div>
    </div>
    
    <div class="main-content">
        <div class="video-container video-border-purple">
            <video class="video-feed" id="local-video" autoplay muted></video>
            <div class="participant-name">Anon</div>
            <div class="audio-indicator">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M9.59 4.59A2 2 0 0 1 11 4h2a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2V6a2 2 0 0 1 .59-1.41z"/>
                    <path d="M4.5 9.5L9 5v14l-4.5-4.5"/>
                </svg>
            </div>
        </div>
        
        <div class="video-container">
            <video class="video-feed" id="remote-video" autoplay></video>
            <div class="participant-name">Sarthak Sharma</div>
            <div class="user-status" id="waiting-message">Waiting for Sarthak to join...</div>
            <button class="settings-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="1"/>
                    <circle cx="12" cy="5" r="1"/>
                    <circle cx="12" cy="19" r="1"/>
                </svg>
            </button>
        </div>
    </div>
    
    <div class="controls">
        <div class="control-buttons">
            <button class="control-button">
                <div class="control-button-icon record-button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10"/>
                        <circle cx="12" cy="12" r="3" fill="white"/>
                    </svg>
                </div>
                <span class="control-button-text">Start</span>
            </button>
            
            <button class="control-button">
                <div class="control-button-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="1" y1="1" x2="23" y2="23"/>
                        <path d="M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"/>
                        <path d="M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"/>
                        <line x1="12" y1="19" x2="12" y2="23"/>
                        <line x1="8" y1="23" x2="16" y2="23"/>
                    </svg>
                </div>
                <span class="control-button-text">Mic</span>
            </button>
            
            <button class="control-button">
                <div class="control-button-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M23 7l-7 5 7 5V7z"/>
                        <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
                    </svg>
                </div>
                <span class="control-button-text">Cam</span>
            </button>
            
            <button class="control-button">
                <div class="control-button-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"/>
                        <path d="M19 9.9c1.8 0 3 .9 3 2.1s-1.2 2.1-3 2.1"/>
                    </svg>
                </div>
                <span class="control-button-text">Speaker</span>
            </button>
            
            <button class="control-button">
                <div class="control-button-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                        <line x1="8" y1="8" x2="16" y2="8"/>
                        <line x1="8" y1="12" x2="16" y2="12"/>
                        <line x1="8" y1="16" x2="12" y2="16"/>
                    </svg>
                </div>
                <span class="control-button-text">Script</span>
            </button>
            
            <button class="control-button">
                <div class="control-button-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                        <polyline points="16 6 12 2 8 6"/>
                        <line x1="12" y1="2" x2="12" y2="15"/>
                    </svg>
                </div>
                <span class="control-button-text">Share</span>
            </button>
            
            <button class="control-button">
                <div class="control-button-icon leave-button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M16 16v1a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                        <polyline points="21 12 16 17 21 22"/>
                        <line x1="16" y1="17" x2="21" y2="17"/>
                    </svg>
                </div>
                <span class="control-button-text">Leave</span>
            </button>
        </div>
    </div>

    <script>
        // DOM Elements
        const localVideo = document.getElementById('local-video');
        const remoteVideo = document.getElementById('remote-video');
        const recordButton = document.querySelector('.record-button').parentElement;
        const micButton = document.querySelectorAll('.control-button')[1];
        const camButton = document.querySelectorAll('.control-button')[2];
        const leaveButton = document.querySelectorAll('.control-button')[6];
        const waitingMessage = document.getElementById('waiting-message');
        
        // State
        let localStream = null;
        let remoteStream = null;
        let recording = false;
        let micEnabled = true;
        let cameraEnabled = true;
        
        // Initialize camera
        async function initCamera() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({
                    video: true,
                    audio: true
                });
                
                localVideo.srcObject = localStream;
                
                // Show waiting message
                waitingMessage.style.display = 'block';
                
                // Simulate remote user joining with a different stream after a delay
                setTimeout(() => {
                    // In a real app, this would be the actual remote peer's stream
                    // For demo, we'll create a simulated stream with a color pattern
                    simulateRemoteUser();
                }, 3000);
                
            } catch (error) {
                console.error('Error accessing media devices:', error);
                alert('Failed to access camera and microphone. Please check your permissions.');
            }
        }
        
        // Simulate remote user
        function simulateRemoteUser() {
            // Hide waiting message
            waitingMessage.style.display = 'none';
            
            // Create a canvas to generate a different video feed
            const canvas = document.createElement('canvas');
            canvas.width = 640;
            canvas.height = 480;
            const ctx = canvas.getContext('2d');
            
            // Create simulated video stream from canvas
            const fakeVideoStream = canvas.captureStream(30);
            
            // Add audio track from local stream (in a real app, this would be the remote user's audio)
            if (localStream && localStream.getAudioTracks().length > 0) {
                fakeVideoStream.addTrack(localStream.getAudioTracks()[0].clone());
            }
            
            // Function to draw different pattern on canvas
            function drawPattern() {
                const time = Date.now() * 0.001;
                ctx.fillStyle = '#242424';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Draw animated pattern (different from local video)
                ctx.beginPath();
                for (let i = 0; i < 5; i++) {
                    const x = Math.sin(time + i * 0.8) * 100 + canvas.width / 2;
                    const y = Math.cos(time + i * 0.8) * 100 + canvas.height / 2;
                    const radius = 20 + Math.sin(time * 2) * 10;
                    
                    ctx.fillStyle = `hsl(${(time * 50 + i * 30) % 360}, 70%, 60%)`;
                    ctx.beginPath();
                    ctx.arc(x, y, radius, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                // Add text to make it clear this is a different feed
                ctx.fillStyle = 'white';
                ctx.font = '20px sans-serif';
                ctx.fillText('Sarthak Sharma (Remote User)', 20, 30);
                
                requestAnimationFrame(drawPattern);
            }
            
            // Start drawing
            drawPattern();
            
            // Set as remote video source
            remoteVideo.srcObject = fakeVideoStream;
            remoteStream = fakeVideoStream;
        }
        
        // Toggle recording
        function toggleRecording() {
            recording = !recording;
            
            // Update UI
            if (recording) {
                recordButton.querySelector('span').textContent = 'Stop';
                // Change icon to stop icon
                recordButton.querySelector('svg').innerHTML = `
                    <rect x="6" y="6" width="12" height="12" fill="white" />
                `;
            } else {
                recordButton.querySelector('span').textContent = 'Start';
                // Change icon back to record icon
                recordButton.querySelector('svg').innerHTML = `
                    <circle cx="12" cy="12" r="10"/>
                    <circle cx="12" cy="12" r="3" fill="white"/>
                `;
            }
        }
        
        // Toggle microphone
        function toggleMic() {
            if (localStream) {
                const audioTracks = localStream.getAudioTracks();
                if (audioTracks.length > 0) {
                    micEnabled = !micEnabled;
                    audioTracks[0].enabled = micEnabled;
                    
                    // Update UI
                    if (micEnabled) {
                        micButton.querySelector('.control-button-icon').style.backgroundColor = '#333';
                    } else {
                        micButton.querySelector('.control-button-icon').style.backgroundColor = '#ff5959';
                    }
                }
            }
        }
        
        // Toggle camera
        function toggleCamera() {
            if (localStream) {
                const videoTracks = localStream.getVideoTracks();
                if (videoTracks.length > 0) {
                    cameraEnabled = !cameraEnabled;
                    videoTracks[0].enabled = cameraEnabled;
                    
                    // Update UI
                    if (cameraEnabled) {
                        camButton.querySelector('.control-button-icon').style.backgroundColor = '#333';
                    } else {
                        camButton.querySelector('.control-button-icon').style.backgroundColor = '#ff5959';
                    }
                }
            }
        }
        
        // Leave meeting
        function leaveMeeting() {
            if (confirm('Are you sure you want to leave the meeting?')) {
                // Stop all tracks
                if (localStream) {
                    localStream.getTracks().forEach(track => track.stop());
                }
                
                alert('You have left the meeting.');
                // In a real app, you would redirect to a post-meeting page
            }
        }
        
        // Event listeners
        recordButton.addEventListener('click', toggleRecording);
        micButton.addEventListener('click', toggleMic);
        camButton.addEventListener('click', toggleCamera);
        leaveButton.addEventListener('click', leaveMeeting);
        
        // Initialize
        window.addEventListener('DOMContentLoaded', initCamera);
    </script>
</body>
</html>